from django.db import models
from django.contrib.auth.models import User
from django.db.models.signals import post_save
from django.dispatch import receiver
from rest_framework.authtoken.models import Token
import random
import uuid


class Rect:
    ''' 
    Rects are created in order to manage regions that
    represent rooms. They are also for checking to see if rooms
    intersect when being generated and placed on the map
    '''

    def __init__(self, coords, size):
        '''
        coords is a tuple containing the top left x, y coordinates
        of the rect. size is a tuple containing the height and width
        of the rect.
        '''
        self.x1, self.y1 = coords
        self.w, self.h = size
        self.x2 = self.x1 + self.w
        self.y2 = self.y1 + self.h

    def __str__(self):
        return f"Rect of width {self.w} and height {self.h} at coordinates {self.x}, {self.y}"

    @property
    def center(self):
        ''' 
        The coordinates of the center of the rectangle in order
        to create tunneling targets for connecting rects together.
        '''
        center_x = int((self.x1 + self.x2) / 2)
        center_y = int((self.y1 + self.y2) / 2)

        return (center_x, center_y)

    def intersects(self, target):
        '''
        Takes in a seperate Rect object and returns true if the rects
        intersect on both the x and y plane.
        '''
        intersect = self.x1 <= target.x2 and self.x2 >= target.x1 and self.y1 <= target.y2 and self.y2 <= target.y1

        return intersect


class Area(models.Model):
    """
    ===Overview===
    The Area model stores data about a collection of Room models
    that relate to each other.


    ===Instance Variables===
    width: This is the width, in rooms, of the area.

    height: This is the height, in rooms, of the area.

    level: The dungeon depth of the Area. This is used to determine
    the relative strength of enemies and loot items.

    max_regions: This is the maximum number of regions that the area
    generator will attempt to create and link together.

    max_region_size: This is the maximum width and height, in rooms,
    that any particular region can be.

    min_region_size: This is the minimum width, and height, in rooms,
    that any particular region can be.
    """
    width = models.IntegerField(default=0)
    height = models.IntegerField(default=0)
    level = models.IntegerField(default=0)
    max_regions = models.IntegerField(default=30)
    max_region_size = models.IntegerField(default=7)
    min_region_size = models.IntegerField(default=3)

    def generate_regions(self, area):
        grid = []
        '''
        Generates a maximum number of regions equal to the defined value
        in the Area model. Regions are generated by creating a rect and
        attempting to place it on the map grid. If the rect does not
        intersect with any existing region, it then draws a new region
        on the map and creates a tunnel between it and the last drawn
        region.
        '''

        '''
        Create a 2d array and populate each element with a Room object that
        has a wall sector_type.
        '''
        for x in range(0, self.width):
            grid.append([])
            for y in range(0, self.height):
                grid[x].append([])

        '''
        Store the rect of each created region in a list so that we can see
        if future rects intersect and should not be placed.
        '''
        region_list = []

        '''
        Remember the center of the last region placed so we have a target
        to draw a tunnel toward when placing the next region.
        '''
        center_of_last_region = None

        '''
        We loop a number of times equal to the maximum allowed regions on the
        map. This does not ensure that many regions will be created.
        '''

        for i in range(self.max_regions):

            '''
            Randomize a width, height and x,y coordinates for a new region
            '''
            w = random.randint(self.min_region_size, self.max_region_size)
            h = random.randint(self.min_region_size, self.max_region_size)
            x = random.randint(2, self.width-(w+2))
            y = random.randint(2, self.height-(h+2))

            region = Rect((x, y), (w, h))

            '''
            Track if we were able to place the newly created region.
            '''
            placement_failed = False

            '''
            Iterate over previously created regions and see if the
            new region intersects those. If it does, placement has
            failed and we start over generating a new region.
            '''
            for placed_region in region_list:
                if region.intersects(placed_region):
                    placement_failed = True
                    break

            '''
            If placement succeeds we append our region to the list of
            placed regions, draw it onto our map. If we have stored
            the center of a previously placed region, we will draw a 
            tunnel between the new and last one. We then set last center
            to that of the newly placed region.
            '''
            if not placement_failed:
                region_list.append(region)
                self.draw_region(region, area)
                if center_of_last_region is not None:
                    self.draw_tunnel(
                        region.center, center_of_last_region, area)

                center_of_last_region = region.center

    def draw_region(self, region, area):
        '''
        region is a rect instance. We iterate over all coordinates within the
        bounds of the rect and populate those coordinates with new instances
        of Room that have floor sector type.
        '''
        for x in range(region.x1, region.x2):
            for y in range(region.y1, region.y2):
                room = Room(x=x, y=y, area=area)
                room.save()

    def draw_tunnel(self, a, b, area):
        '''
        a and b are the centermost points of two seperate regions that have
        been drawn on the map grid. We dig out a tunnel, by making a room
        with the sector type of floor between the x and then the y coords
        of each region.
        '''
        x1, y1 = a
        x2, y2 = b

        for x in range(min(x1, x2), max(x1, x2) + 1):
            room = Room(x=x, y=y1, area=area)
            room.save()

        for y in range(min(y1, y2), max(y1, y2) + 1):
            room = Room(x=x1, y=y, area=area)
            room.save()


class Room(models.Model):
    area = models.ForeignKey(Area, on_delete=models.CASCADE)
    passable = models.BooleanField(default=False)
    x = models.IntegerField(default=0)
    y = models.IntegerField(default=0)
    start_room = models.BooleanField(default=False)
    exit_room = models.BooleanField(default=False)

    def playerNames(self, currentPlayerID):
        return [p.user.username for p in Player.objects.filter(currentRoom=self.id) if p.id != int(currentPlayerID)]

    def playerUUIDs(self, currentPlayerID):
        return [p.uuid for p in Player.objects.filter(currentRoom=self.id) if p.id != int(currentPlayerID)]


class Player(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    currentArea = models.IntegerField(default=1)
    uuid = models.UUIDField(default=uuid.uuid4, unique=True)
    current_x = models.IntegerField(default=0)
    current_y = models.IntegerField(default=0)

    def area(self):
        return Area.objects.get(id=self.currentArea)


@receiver(post_save, sender=User)
def create_user_player(sender, instance, created, **kwargs):
    if created:
        Player.objects.create(user=instance)
        Token.objects.create(user=instance)


@receiver(post_save, sender=User)
def save_user_player(sender, instance, **kwargs):
    instance.player.save()
